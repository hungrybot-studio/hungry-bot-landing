const { WebSocketServer } = require('ws');
const http = require('http');

const PORT = process.env.PORT || 8080;

// ElevenLabs API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY || 'your-api-key-here';
const ELEVENLABS_VOICE_ID = process.env.ELEVENLABS_VOICE_ID || '21m00Tcm4TlvDq8ikWAM'; // Rachel voice

// –°—Ç–≤–æ—Ä—é—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  if (req.method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'running',
      message: 'WebSocket —Å–µ—Ä–≤–µ—Ä –∑ ElevenLabs —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –ø—Ä–∞—Ü—é—î',
      timestamp: new Date().toISOString(),
      port: PORT,
      uptime: process.uptime(),
      connections: wss.clients.size,
      features: ['WebSocket', 'ElevenLabs TTS', 'AI Agent']
    }));
  } else {
    res.writeHead(405, { 'Content-Type': 'text/plain' });
    res.end('Method not allowed');
  }
});

// –°—Ç–≤–æ—Ä—é—î–º–æ WebSocket —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ö HTTP —Å–µ—Ä–≤–µ—Ä–∞
const wss = new WebSocketServer({ server });

console.log(`üöÄ HTTP —Ç–∞ WebSocket —Å–µ—Ä–≤–µ—Ä –∑ ElevenLabs –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ ElevenLabs
async function generateElevenLabsAudio(text, voiceId = ELEVENLABS_VOICE_ID) {
  try {
    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': ELEVENLABS_API_KEY
      },
      body: JSON.stringify({
        text: text,
        model_id: 'eleven_monolingual_v1',
        voice_settings: {
          stability: 0.5,
          similarity_boost: 0.5
        }
      })
    });

    if (!response.ok) {
      throw new Error(`ElevenLabs API error: ${response.status}`);
    }

    const audioBuffer = await response.arrayBuffer();
    const base64Audio = Buffer.from(audioBuffer).toString('base64');
    
    return {
      success: true,
      audioData: base64Audio,
      format: 'audio/mpeg'
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ElevenLabs API:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó AI –∞–≥–µ–Ω—Ç–∞
async function activateHungryBotAgent(ws, clientId) {
  try {
    console.log(`ü§ñ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Hungry Bot –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
    
    // –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
    const welcomeMessage = "–ü—Ä–∏–≤—ñ—Ç! –Ø Hungry Bot, —Ç–≤—ñ–π –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –≥–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ —Ç–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫—É—Ö–Ω—é, —Ä–µ—Ü–µ–ø—Ç–∏ —Ç–∞ –∫—É–ª—ñ–Ω–∞—Ä–Ω—ñ —Å–µ–∫—Ä–µ—Ç–∏. –©–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?";
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ ElevenLabs
    const audioResult = await generateElevenLabsAudio(welcomeMessage);
    
    if (audioResult.success) {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—É–¥—ñ–æ
      ws.send(JSON.stringify({
        type: 'agent_speech',
        message: welcomeMessage,
        audioData: audioResult.audioData,
        audioFormat: audioResult.format,
        timestamp: new Date().toISOString()
      }));
      
      console.log(`‚úÖ –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥—ñ–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
    } else {
      // –Ø–∫—â–æ –∞—É–¥—ñ–æ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
      ws.send(JSON.stringify({
        type: 'agent_speech',
        message: welcomeMessage,
        error: '–ê—É–¥—ñ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ',
        timestamp: new Date().toISOString()
      }));
      
      console.log(`‚ö†Ô∏è –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –±–µ–∑ –∞—É–¥—ñ–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}`);
    }
    
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    ws.send(JSON.stringify({
      type: 'error',
      message: '–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞',
      error: error.message,
      timestamp: new Date().toISOString()
    }));
  }
}

// –û–±—Ä–æ–±–∫–∞ WebSocket –∑'—î–¥–Ω–∞–Ω—å
wss.on('connection', (ws, req) => {
  const clientId = req.socket.remoteAddress || 'unknown';
  console.log(`‚úÖ –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${clientId}`);

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
  ws.send(JSON.stringify({
    type: 'welcome',
    message: '–í—ñ—Ç–∞—é! WebSocket —Å–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.',
    timestamp: new Date().toISOString(),
    features: ['ElevenLabs TTS', 'AI Agent', 'Voice Generation']
  }));

  // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞
  ws.on('message', async (data) => {
    try {
      const message = JSON.parse(data);
      console.log(`üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${clientId}:`, message);

      // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      switch (message.type) {
        case 'activate_agent':
          // –ê–∫—Ç–∏–≤–∞—Ü—ñ—è AI –∞–≥–µ–Ω—Ç–∞
          await activateHungryBotAgent(ws, clientId);
          break;
          
        case 'interrupt_agent':
          // –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
          console.log(`üé§ –ö–ª—ñ—î–Ω—Ç ${clientId} –ø–µ—Ä–µ—Ä–∏–≤–∞—î –∞–≥–µ–Ω—Ç–∞`);
          ws.send(JSON.stringify({
            type: 'agent_interrupted',
            message: '–ê–≥–µ–Ω—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ. –©–æ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —Å–∫–∞–∑–∞—Ç–∏?',
            timestamp: new Date().toISOString()
          }));
          break;
          
        case 'user_message':
          // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          console.log(`üí¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${clientId} —Å–∫–∞–∑–∞–≤: ${message.text}`);
          
          // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          // —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —á–µ—Ä–µ–∑ AI
          
          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
          ws.send(JSON.stringify({
            type: 'message_received',
            message: '–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ',
            timestamp: new Date().toISOString()
          }));
          break;
          
        default:
          // –ï—Ö–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —Ç–∏–ø—ñ–≤
          console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –µ—Ö–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É ${clientId}`);
          ws.send(JSON.stringify({
            type: 'echo',
            originalMessage: message,
            timestamp: new Date().toISOString(),
            serverInfo: {
              version: '2.0.0',
              features: ['ElevenLabs TTS', 'AI Agent'],
              uptime: process.uptime()
            }
          }));
      }
      
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${clientId}:`, error);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      ws.send(JSON.stringify({
        type: 'error',
        message: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
        error: error.message,
        timestamp: new Date().toISOString()
      }));
    }
  });

  // –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
  ws.on('close', () => {
    console.log(`üëã –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${clientId}`);
  });

  // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
  ws.on('error', (error) => {
    console.error(`‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
  });
});

// –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`üì° HTTP —Ç–∞ WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–∏–π–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê HTTP: http://localhost:${PORT}`);
  console.log(`üîå WebSocket: ws://localhost:${PORT}`);
  console.log(`ü§ñ ElevenLabs —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: ${ELEVENLABS_API_KEY !== 'your-api-key-here' ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('‚úÖ HTTP —Ç–∞ WebSocket —Å–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('‚úÖ HTTP —Ç–∞ WebSocket —Å–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ');
    process.exit(0);
  });
});
