import { env } from './env';
import { LeadPayload } from '@/types/lead';
import { leadPayloadSchema } from './validators';

export async function submitLeadForm(data: LeadPayload): Promise<{ success: boolean; error?: string }> {
  try {
    console.log('üì® submitLeadForm –æ—Ç—Ä–∏–º–∞–≤ –¥–∞–Ω—ñ:', data);
    
    // Validate data
    const validatedData = leadPayloadSchema.parse(data);
    console.log('‚úÖ –î–∞–Ω—ñ –≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ:', validatedData);
    
    console.log('üåê –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω–∏–π API —Ä–æ—É—Ç');

    // Send data through our local API route (bypasses CORS)
    const response = await fetch('/api/submit-lead', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(validatedData),
    });

    if (!response.ok) {
      console.error('‚ùå HTTP –ø–æ–º–∏–ª–∫–∞:', response.status, response.statusText);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API —Ä–æ—É—Ç–∞:', result);
    
    if (result.success) {
      return { success: true };
    } else {
      throw new Error(result.error || 'Server returned error');
    }
  } catch (error) {
    console.error('Form submission error:', error);
    
    if (error instanceof Error) {
      return { success: false, error: error.message };
    }
    
    return { success: false, error: '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' };
  }
}

export function formatFormData(formData: FormData): Record<string, string> {
  const data: Record<string, string> = {};
  
  for (const [key, value] of formData.entries()) {
    if (typeof value === 'string') {
      data[key] = value;
    }
  }
  
  return data;
}
