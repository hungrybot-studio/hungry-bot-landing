'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { leadFormSchema, type LeadFormSchema } from '@/lib/validators';
import { submitLeadForm } from '@/lib/forms';
import { getStoredUTMData } from '@/lib/utm';
import { trackFormOpen, trackFormSubmit } from '@/lib/analytics';
import { ConsentCheckbox } from './consent-checkbox';
import { CTAButton } from './cta-button';

interface LeadFormModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export function LeadFormModal({ isOpen, onClose }: LeadFormModalProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);

  // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  useEffect(() => {
    if (isOpen) {
      console.log('üîç –§–æ—Ä–º–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:');
      console.log('üåê NEXT_PUBLIC_LEADS_WEBHOOK:', process.env.NEXT_PUBLIC_LEADS_WEBHOOK);
      console.log('üîß NODE_ENV:', process.env.NODE_ENV);
    }
  }, [isOpen]);

  const {
    register,
    handleSubmit,
    formState: { errors, isValidating },
    watch,
    setValue,
    reset,
    trigger,
  } = useForm<LeadFormSchema>({
    resolver: zodResolver(leadFormSchema),
    mode: 'onChange',
    defaultValues: {
      consent: false,
    },
  });

  const watchedEmail = watch('email');
  const watchedTelegram = watch('telegram');
  const watchedConsent = watch('consent');

  // Track form open
  useEffect(() => {
    if (isOpen) {
      trackFormOpen();
    }
  }, [isOpen]);

  // Set UTM data on form open
  useEffect(() => {
    if (isOpen) {
      const utmData = getStoredUTMData();
      // UTM data will be added to the payload during submission
    }
  }, [isOpen]);

  const onSubmit = async (data: LeadFormSchema) => {
    // Validate form before submission
    const isValid = await trigger();
    if (!isValid) {
      return;
    }

    setIsSubmitting(true);
    setSubmitError(null);

    try {
      // Add UTM data to payload
      const utmData = getStoredUTMData();
      const payload = {
        ...data,
        ...utmData,
      };

      // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', payload);
      console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ consent:', payload.consent);
      console.log('üîç –¢–∏–ø –ø–æ–ª—è consent:', typeof payload.consent);

      const result = await submitLeadForm(payload);

      if (result.success) {
        setIsSuccess(true);
        trackFormSubmit(true);
        reset();
      } else {
        setSubmitError(result.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏');
        trackFormSubmit(false, result.error);
      }
    } catch (error) {
      setSubmitError('–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
      trackFormSubmit(false, 'Unknown error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    if (!isSubmitting) {
      onClose();
      setIsSuccess(false);
      setSubmitError(null);
      reset();
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape') {
      handleClose();
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex min-h-screen items-center justify-center p-4">
          {/* Backdrop */}
          <motion.div
            className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleClose}
          />

          {/* Modal */}
          <motion.div
            className="relative w-full max-w-2xl bg-white rounded-2xl shadow-2xl overflow-hidden"
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            transition={{ type: 'spring', damping: 25, stiffness: 300 }}
            onKeyDown={handleKeyDown}
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-primary-600 to-secondary-600 px-6 py-6 text-white">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">
                  {isSuccess ? 'üéâ –î—è–∫—É—î–º–æ!' : '–ß–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–æ–±—ñ —Ç–∞–∫–∏–π –±–æ—Ç?'}
                </h2>
                <button
                  onClick={handleClose}
                  className="text-white hover:text-gray-200 transition-colors duration-200 text-2xl"
                  disabled={isSubmitting}
                >
                  ‚úï
                </button>
              </div>
              {!isSuccess && (
                <p className="text-primary-100 mt-2">
                  –ó–∞–ø–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É —ñ –æ—Ç—Ä–∏–º–∞–π —Ä–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø –¥–æ Hungry Bot
                </p>
              )}
            </div>

            {/* Content */}
            <div className="p-6">
              {isSuccess ? (
                <SuccessContent onClose={handleClose} />
              ) : (
                <FormContent
                  register={register}
                  errors={errors}
                  watchedEmail={watchedEmail}
                  watchedTelegram={watchedTelegram}
                  watchedConsent={watchedConsent}
                  setValue={setValue}
                  onSubmit={handleSubmit(onSubmit)}
                  isSubmitting={isSubmitting}
                  submitError={submitError}
                />
              )}
            </div>
          </motion.div>
        </div>
      </div>
    </AnimatePresence>
  );
}

function FormContent({
  register,
  errors,
  watchedEmail,
  watchedTelegram,
  watchedConsent,
  setValue,
  onSubmit,
  isSubmitting,
  submitError,
}: any) {
  return (
    <form onSubmit={onSubmit} className="space-y-6">
      {/* Contact Information */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
              Email (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
            </label>
            <input
              {...register('email')}
              type="email"
              id="email"
              className="input-field"
              placeholder="your@email.com"
            />
            {errors.email && (
              <p className="text-red-600 text-sm mt-1">{errors.email.message}</p>
            )}
          </div>

          <div>
            <label htmlFor="telegram" className="block text-sm font-medium text-gray-700 mb-2">
              Telegram username (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
            </label>
            <input
              {...register('telegram')}
              type="text"
              id="telegram"
              className="input-field"
              placeholder="@username"
            />
            {errors.telegram && (
              <p className="text-red-600 text-sm mt-1">{errors.telegram.message}</p>
            )}
          </div>
        </div>

        <p className="text-sm text-gray-500">
          * –í–∫–∞–∂–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑ —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É
        </p>
      </div>

      {/* Problem & Frequency */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">–¢–≤–æ—è —Å–∏—Ç—É–∞—Ü—ñ—è</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="problem" className="block text-sm font-medium text-gray-700 mb-2">
              –ß–∏ —á–∞—Å—Ç–æ —É —Ç–µ–±–µ –≤–∏–Ω–∏–∫–∞—î –ø–∏—Ç–∞–Ω–Ω—è "—â–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏"?
            </label>
            <select {...register('problem')} id="problem" className="select-field">
              <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
              <option value="–¢–∞–∫">–¢–∞–∫, —â–æ–¥–Ω—è</option>
              <option value="–Ü–Ω–æ–¥—ñ">–Ü–Ω–æ–¥—ñ, –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</option>
              <option value="–ù—ñ">–ù—ñ, —Ä—ñ–¥–∫–æ</option>
            </select>
            {errors.problem && (
              <p className="text-red-600 text-sm mt-1">{errors.problem.message}</p>
            )}
          </div>

          <div>
            <label htmlFor="cook_freq" className="block text-sm font-medium text-gray-700 mb-2">
              –Ø–∫ —á–∞—Å—Ç–æ —Ç–∏ –≥–æ—Ç—É—î—à?
            </label>
            <select {...register('cook_freq')} id="cook_freq" className="select-field">
              <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
              <option value="–©–æ–¥–Ω—è">–©–æ–¥–Ω—è</option>
              <option value="–ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å">–ö—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</option>
              <option value="–†—ñ–¥–∫–æ">–†—ñ–¥–∫–æ</option>
            </select>
            {errors.cook_freq && (
              <p className="text-red-600 text-sm mt-1">{errors.cook_freq.message}</p>
            )}
          </div>
        </div>
      </div>

      {/* Preferences */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">–¢–≤–æ—ó —É–ø–æ–¥–æ–±–∞–Ω–Ω—è</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="tg_ok" className="block text-sm font-medium text-gray-700 mb-2">
              –ß–∏ –∑—Ä—É—á–Ω–æ —Ç–æ–±—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram?
            </label>
            <select {...register('tg_ok')} id="tg_ok" className="select-field">
              <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
              <option value="–¢–∞–∫">–¢–∞–∫, –¥—É–∂–µ –∑—Ä—É—á–Ω–æ</option>
              <option value="–ù—ñ">–ù—ñ, –∫—Ä–∞—â–µ email</option>
            </select>
            {errors.tg_ok && (
              <p className="text-red-600 text-sm mt-1">{errors.tg_ok.message}</p>
            )}
          </div>

          <div>
            <label htmlFor="tone" className="block text-sm font-medium text-gray-700 mb-2">
              –Ø–∫–∏–π —Ç–æ–Ω —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?
            </label>
            <select {...register('tone')} id="tone" className="select-field">
              <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
              <option value="–ì—É–º–æ—Ä">–ó –≥—É–º–æ—Ä–æ–º —Ç–∞ –∂–∞—Ä—Ç–∞–º–∏</option>
              <option value="–°–µ—Ä–π–æ–∑–Ω–æ">–°–µ—Ä–π–æ–∑–Ω–æ —Ç–∞ –ø–æ –¥—ñ–ª—É</option>
              <option value="–ö–æ–º–±–æ">–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥</option>
            </select>
            {errors.tone && (
              <p className="text-red-600 text-sm mt-1">{errors.tone.message}</p>
            )}
          </div>
        </div>
      </div>

      {/* Style & Goals */}
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="style_preference" className="block text-sm font-medium text-gray-700 mb-2">
              –Ø–∫–∏–π —Å—Ç–∏–ª—å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?
            </label>
            <select {...register('style_preference')} id="style_preference" className="select-field">
              <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
              <option value="–®–≤–∏–¥–∫–æ">–®–≤–∏–¥–∫–æ —Ç–∞ –ø—Ä–æ—Å—Ç–æ</option>
              <option value="–ë—é–¥–∂–µ—Ç–Ω–æ">–ë—é–¥–∂–µ—Ç–Ω–æ —Ç–∞ –µ–∫–æ–Ω–æ–º–Ω–æ</option>
              <option value="–î–ª—è —Å—ñ–º'—ó">–î–ª—è —Å—ñ–º'—ó –∑ –¥—ñ—Ç—å–º–∏</option>
              <option value="–î–ª—è –¥—ñ—î—Ç–∏">–ó–¥–æ—Ä–æ–≤–∞ —ó–∂–∞ —Ç–∞ –¥—ñ—î—Ç–∞</option>
              <option value="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ">–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ —Ç–∞ –Ω–µ–∑–≤–∏—á–Ω–æ</option>
            </select>
            {errors.style_preference && (
              <p className="text-red-600 text-sm mt-1">{errors.style_preference.message}</p>
            )}
          </div>

          <div>
            <label htmlFor="primary_goal" className="block text-sm font-medium text-gray-700 mb-2">
              –Ø–∫–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ –º–µ—Ç–∞?
            </label>
            <select {...register('primary_goal')} id="primary_goal" className="select-field">
              <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
              <option value="–ú–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å">–ü–ª–∞–Ω—É–≤–∞—Ç–∏ –º–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</option>
              <option value="–î–µ—à–µ–≤—ñ —Ä–µ—Ü–µ–ø—Ç–∏">–ó–Ω–∞—Ö–æ–¥–∏—Ç–∏ –¥–µ—à–µ–≤—ñ —Ä–µ—Ü–µ–ø—Ç–∏</option>
              <option value="–§—ñ—Ç–Ω–µ—Å-—Å—Ç—Ä–∞–≤–∏">–ì–æ—Ç—É–≤–∞—Ç–∏ —Ñ—ñ—Ç–Ω–µ—Å-—Å—Ç—Ä–∞–≤–∏</option>
              <option value="–©–æ—Å—å –Ω–æ–≤–µ">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ</option>
            </select>
            {errors.primary_goal && (
              <p className="text-red-600 text-sm mt-1">{errors.primary_goal.message}</p>
            )}
          </div>
        </div>
      </div>

      {/* Blocker */}
      <div>
        <label htmlFor="blocker" className="block text-sm font-medium text-gray-700 mb-2">
          –©–æ –∑–∞–≤–∞–∂–∞—î —Ç–æ–±—ñ –≥–æ—Ç—É–≤–∞—Ç–∏ —á–∞—Å—Ç—ñ—à–µ? (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
        </label>
        <textarea
          {...register('blocker')}
          id="blocker"
          rows={3}
          className="textarea-field"
          placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Ω–µ–º–∞—î —á–∞—Å—É, –Ω–µ –∑–Ω–∞—é —â–æ –≥–æ—Ç—É–≤–∞—Ç–∏, —Å–∫–ª–∞–¥–Ω–æ –∑–Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏..."
        />
      </div>

      {/* Payment Willingness */}
      <div>
        <label htmlFor="payment_willingness" className="block text-sm font-medium text-gray-700 mb-2">
          –ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –ø–æ—Å–ª—É–≥–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞?
        </label>
        <select {...register('payment_willingness')} id="payment_willingness" className="select-field">
          <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç</option>
          <option value="–¢–∞–∫">–¢–∞–∫, –≥–æ—Ç–æ–≤–∏–π –ø–ª–∞—Ç–∏—Ç–∏</option>
          <option value="–ù—ñ">–ù—ñ, –Ω–µ –≥–æ—Ç–æ–≤–∏–π</option>
          <option value="–í–∞–∂–∫–æ —Å–∫–∞–∑–∞—Ç–∏">–í–∞–∂–∫–æ —Å–∫–∞–∑–∞—Ç–∏</option>
        </select>
        {errors.payment_willingness && (
          <p className="text-red-600 text-sm mt-1">{errors.payment_willingness.message}</p>
        )}
      </div>

      {/* Fair Price */}
      <div>
        <label htmlFor="fair_price" className="block text-sm font-medium text-gray-700 mb-2">
          –Ø–∫–∞, –Ω–∞ –í–∞—à—É –¥—É–º–∫—É, –±—É–ª–∞ –± —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞–∫–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞ –Ω–∞ –º—ñ—Å—è—Ü—å?
        </label>
        <select {...register('fair_price')} id="fair_price" className="select-field">
          <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å</option>
          <option value="1$">1$</option>
          <option value="3$">3$</option>
          <option value="5$">5$</option>
          <option value="10$">10$</option>
        </select>
        {errors.fair_price && (
          <p className="text-red-600 text-sm mt-1">{errors.fair_price.message}</p>
        )}
      </div>

      {/* Consent */}
      <ConsentCheckbox
        checked={watchedConsent || false}
        onChange={(checked) => {
          setValue('consent', checked, { shouldValidate: true });
          console.log('‚úÖ Consent –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', checked);
        }}
        error={errors.consent?.message}
      />
      <input type="hidden" {...register('consent')} />

      {/* Submit Error */}
      {submitError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center space-x-2 text-red-600">
            <span>‚ö†Ô∏è</span>
            <span>{submitError}</span>
          </div>
        </div>
      )}

      {/* Submit Button */}
      <CTAButton
        type="submit"
        disabled={isSubmitting}
        className="w-full"
        location="form_submit"
      >
        {isSubmitting ? (
          <div className="flex items-center justify-center space-x-2">
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            <span>–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...</span>
          </div>
        ) : (
          'üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –π –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø'
        )}
      </CTAButton>
    </form>
  );
}

function SuccessContent({ onClose }: { onClose: () => void }) {
  return (
    <div className="text-center space-y-6">
      <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto">
        <span className="text-4xl">üéâ</span>
      </div>
      
      <div>
        <h3 className="text-2xl font-bold text-gray-900 mb-2">
          –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!
        </h3>
        <p className="text-gray-600">
          –î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ Hungry Bot. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.
        </p>
      </div>

      <div className="space-y-4">
        <CTAButton
          onClick={() => window.open('https://t.me/hungrybot', '_blank')}
          variant="primary"
          size="lg"
          location="success_telegram"
          className="w-full"
        >
          –í—ñ–¥–∫—Ä–∏—Ç–∏ Telegram-–±–æ—Ç–∞
        </CTAButton>
        
        <CTAButton
          onClick={() => window.open('https://t.me/hungrybot_channel', '_blank')}
          variant="secondary"
          size="lg"
          location="success_channel"
          className="w-full"
        >
          –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª
        </CTAButton>
      </div>

      <button
        onClick={onClose}
        className="text-gray-500 hover:text-gray-700 transition-colors duration-200"
      >
        –ó–∞–∫—Ä–∏—Ç–∏
      </button>
    </div>
  );
}
